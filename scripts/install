#!/bin/bash

# Exit on command errors and treat unset variables as an error
set -eu

source .fonctions	# Loads the generic functions usually used in the script
source /usr/share/yunohost/helpers # Source app helpers

CLEAN_SETUP () {
	# Clean installation residues that are not supported by the remove script.
	# Clean hosts
	sudo sed -i '/#MEDIADROP/d' /etc/hosts
}
TRAP_ON	# Active trap to stop the script if an error is detected.

domain=$YNH_APP_ARG_DOMAIN
path=$YNH_APP_ARG_PATH
admin_mediadrop=$YNH_APP_ARG_ADMIN
is_public=$YNH_APP_ARG_IS_PUBLIC

app=$YNH_APP_INSTANCE_NAME

CHECK_VAR "$app" "app name not set"

CHECK_USER "$admin_mediadrop"

CHECK_PATH

CHECK_DOMAINPATH

CHECK_FINALPATH

FIND_PORT 8081	# Check port availability

ynh_app_setting_set $app domain $domain
ynh_app_setting_set $app path $path
ynh_app_setting_set $app admin $admin_mediadrop
ynh_app_setting_set $app is_public $is_public

# Install python-virtualenv and all dependencies
sudo apt-get update
sudo apt-get -y install libjpeg-dev zlib1g-dev libfreetype6-dev libmysqlclient-dev python-dev
sudo apt-get -y install python-setuptools python-virtualenv python-pip

GENERATE_DB $app	# Create a database and a dedicated user in the app name

# Creates the destination directory and stores its location.
sudo mkdir -p "$final_path/venv"
ynh_app_setting_set $app final_path $final_path
# Create user
sudo useradd -N $app -d $final_path

# Get source
SETUP_SOURCE

# Copy nginx configuration
sudo cp ../conf/nginx.conf /etc/nginx/conf.d/$domain.d/$app.conf

# Modif the variables in the nginx configuration file
sudo sed -i "s@__PATHTOCHANGE__@$path@g" /etc/nginx/conf.d/$domain.d/$app.conf
sudo sed -i "s@__FINALPATH__@$final_path@g" /etc/nginx/conf.d/$domain.d/$app.conf

if [ "$is_public" = "Yes" ];
then
	sudo sed -i "s@#--PRIVATE--@@g" /etc/nginx/conf.d/$domain.d/$app.conf
fi

# Set permissions mediadrop directory
sudo chown -R $app: $final_path

# Create a new virtual environment:
sudo su $app -c "virtualenv --distribute --no-site-packages $final_path/venv"

# Prepare mediacore to be installed
sudo sed -i "s@allow_hosts = static.mediadrop.net@#allow_hosts = static.mediadrop.net@g" "${final_path}/setup.cfg"

# Move to final_path
pushd ${final_path}

# Now, activate that virtual environment
sudo bash -c "source ${final_path}/venv/bin/activate && pip install uwsgi && python setup.py develop"

# To create deployment.ini in your current dir
sudo bash -c "source ${final_path}/venv/bin/activate && paster make-config MediaDrop ${final_path}/deployment.ini"

# Adapt config Mediadrop
sudo sed -i 's,host = 0.0.0.0,host = 127.0.0.1,'  $final_path/deployment.ini
sudo sed -i 's,port = 8080,port = '${port}','  $final_path/deployment.ini
sudo sed -i 's,email_to = you@yourdomain.com,email_to = '${admin_mediadrop}'@'${domain}',' $final_path/deployment.ini
sudo sed -i 's,error_email_from = paste@localhost,error_email_from = '${admin_mediadrop}'@'${domain}',' $final_path/deployment.ini
sudo sed -i 's,mysql://username:pass@localhost/dbname?charset=utf8\&use_unicode=0,mysql://'${db_user}':'${db_pwd}'@localhost/'${db_user}'?charset=utf8\&use_unicode=0,' $final_path/deployment.ini
sudo sed -i 's,file_serve_method = default,file_serve_method = nginx_redirect,' $final_path/deployment.ini
sudo sed -i 's,# nginx_serve_path = __mediadrop_serve__,nginx_serve_path = __mediadrop_serve__,' $final_path/deployment.ini
sudo sed -i 's,static_files = true,static_files = false,' $final_path/deployment.ini
sudo sed -i 's,enable_gzip = true,enable_gzip = false,' $final_path/deployment.ini
sudo sed -i 's,static_files = false,static_files = true,' $final_path/deployment.ini
sudo sed -i "s,cache_dir = %(here)s/data,cache_dir = $final_path/data/," $final_path/deployment.ini
sudo sed -i "s,image_dir = %(here)s/data/images,image_dir = $final_path/data/images/," $final_path/deployment.ini
sudo sed -i "s,media_dir = %(here)s/data/media,media_dir = $final_path/data/media/," $final_path/deployment.ini
sudo sed -i 's,sqlalchemy.pool_recycle = 3600,sqlalchemy.pool_recycle = 200,' $final_path/deployment.ini

# Move to script folder
popd

# Add uwsgi into deployment.ini (end of file)
sudo su -c "cat ../conf/uwsgi >> ${final_path}/deployment.ini"

# Add script systemd
sudo cp ../conf/mediadrop.uwsgi.service /etc/systemd/system/mediadrop.uwsgi.service
sudo chown root: /etc/systemd/system/mediadrop.uwsgi.service
sudo sed -i "s@__FINALPATH__@$final_path/@g" /etc/systemd/system/mediadrop.uwsgi.service
sudo cp ../conf/mediadrop.service /etc/systemd/system/mediadrop.service
sudo chown root: /etc/systemd/system/mediadrop.service
sudo sed -i "s@__FINALPATH__@$final_path/@g" /etc/systemd/system/mediadrop.service

# Setup Mediadrop
sudo bash -c "source ${final_path}/venv/bin/activate && paster setup-app ${final_path}/deployment.ini"

# Import fulltext search database triggers
sudo mysql -u $db_user -p$db_pwd $app < "${final_path}/setup_triggers.sql"

echo -e "127.0.0.1 $domain #MEDIADROP" | sudo tee -a /etc/hosts

# Set ssowat config
if [[ $is_public -eq 0 ]]; then
	ynh_app_setting_delete $app unprotected_uris
	sudo yunohost app ssowatconf
fi

sudo systemctl daemon-reload

# Start mediadrop
sudo systemctl start mediadrop.service
sudo systemctl enable mediadrop.service

# Start uwsgi
sudo systemctl start mediadrop.uwsgi.service
sudo systemctl enable mediadrop.uwsgi.service

# Add uwsgi & mediadrop as a service
sudo yunohost service add mediadrop.uwsgi
sudo yunohost service add mediadrop

sudo rm -fr /root/.python-eggs

# Reload Nginx
sudo systemctl reload nginx
sudo systemctl reload mysql

# clean hosts
sudo sed -i '/#MEDIADROP/d' /etc/hosts
